From 1a86db6cfa2149c321f344d1a1176fb81a1c1312 Mon Sep 17 00:00:00 2001
From: Karen <karen@laesa.(none)>
Date: Thu, 30 Sep 2010 00:19:59 -0700
Subject: [PATCH 1/3] Added bug data dump test

---
 README.mkd                                         |    2 +-
 .../management/commands/dump_public_user_data.py   |    7 ++++++
 mysite/customs/tests.py                            |   22 ++++++++++++++++++++
 mysite/search/models.py                            |    1 +
 4 files changed, 31 insertions(+), 1 deletions(-)

diff --git a/README.mkd b/README.mkd
index f2b5663..85d67f3 100644
--- a/README.mkd
+++ b/README.mkd
@@ -76,7 +76,7 @@ You'll download a whole bunch of Python code and run other setup tasks. This is
 
 (If you want to know what it does, read the file!)
 
-3. Run the user setup script. This one sets up permissions in MySQL.
+3. Run the  user setup script. This one sets up permissions in MySQL.
 
     mysql -uroot < mysite/scripts/database_02_users.sql
 
diff --git a/mysite/customs/management/commands/dump_public_user_data.py b/mysite/customs/management/commands/dump_public_user_data.py
index 14ab670..fa817b0 100644
--- a/mysite/customs/management/commands/dump_public_user_data.py
+++ b/mysite/customs/management/commands/dump_public_user_data.py
@@ -1,6 +1,7 @@
 import logging
 
 from django.contrib.auth.models import User
+from mysite.search.models import Bug
 import sys
 import simplejson
 from django.core.management.base import BaseCommand
@@ -51,6 +52,12 @@ class Command(BaseCommand):
         # For now, since I can't write it right now, I pretend we got the empty list as the result.
         public_data_from_person_model = []
         data.extend(public_data_from_person_model)
+        
+        # exporting Bug data (?)
+        public_bug_data = self.serialize_objects(
+	        query_set=Bug.all_bugs.all(),
+	        whitelisted_columns = ['project', 'title', 'description', 'status'])
+        data.extend(public_bug_data)
 
         ### anyway, now we stream all this data out using simplejson
         simplejson.dump(data, output)
diff --git a/mysite/customs/tests.py b/mysite/customs/tests.py
index 6f1c1cb..f6340d6 100644
--- a/mysite/customs/tests.py
+++ b/mysite/customs/tests.py
@@ -1581,5 +1581,27 @@ class DataExport(django.test.TestCase):
         # and the user's password is blank (instead of the real password)
         self.assertEquals(new_u.password, '')
 
+
+    def test_dump_bug(self):
+		# data capture, woo
+		fake_stdout = StringIO()
+		# make fake bug
+		b = Bug.create_dummy()
+		b.title = 'fire-ant'
+		
+		# dump fake bug into fake stdout
+		command = mysite.customs.management.commands.dump_public_user_data.Command()
+		command.handle(output=fake_stdout)
+		
+		#now, delete bug...
+		b.delete()
+		
+		# let's see if we can re-import fire-ant!
+		for obj in django.core.serializers.deserialize('json', fake_stdout.getvalue()):
+			obj.save()
+		
+		# testing to see if fire-ant is there
+		reincarnated_b = django.contrib.auth.models.Bug.objects.get(title='fire-ant')
+
 # vim: set nu:
 
diff --git a/mysite/search/models.py b/mysite/search/models.py
index eb61291..870279e 100644
--- a/mysite/search/models.py
+++ b/mysite/search/models.py
@@ -440,6 +440,7 @@ class Bug(OpenHatchModel):
     def create_dummy(**kwargs):
         now = datetime.datetime.utcnow()
         n = str(Bug.all_bugs.count())
+        # FIXME (?) Project.objects.all()[0] call below makes an out-of-bounds error in testing...
         data = dict(title=n, project=Project.objects.all()[0], 
                 date_reported=now,
                 last_touched=now,
-- 
1.7.0.4

