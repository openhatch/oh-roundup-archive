From 5415d75e10afd631b116be2b967e2d6cb3a91eab Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Tue, 15 Jun 2010 06:03:10 +0000
Subject: [PATCH] Issues 94 and 95 - Twisted and Sugar Labs bug trackers migrated to the new format. Also, added many more Trac-trackers in the same way (taken from the list on the Bug_trackers wiki page).

---
 mysite/customs/bugtrackers/trac.py                 |    8 +-
 mysite/customs/tests.py                            |   12 +-
 .../management/commands/search_daily_tasks.py      |   22 +-
 mysite/search/tasks/trac_instances.py              |  243 +++++++++++++++++++-
 4 files changed, 264 insertions(+), 21 deletions(-)

diff --git a/mysite/customs/bugtrackers/trac.py b/mysite/customs/bugtrackers/trac.py
index a3c2423..9f2bdfb 100644
--- a/mysite/customs/bugtrackers/trac.py
+++ b/mysite/customs/bugtrackers/trac.py
@@ -16,6 +16,7 @@ def csv_of_bugs(url):
     b = mysite.customs.ohloh.mechanize_get(url)
     return b.response()
 
+# FIXME: Seems redundant given the previous method exists. Remove?
 def sugar_labs_csv_of_easy_bugs():
     b = mysite.customs.ohloh.mechanize_get(
         'http://bugs.sugarlabs.org/query?status=new&status=assigned&status=reopened&format=csv&keywords=%7sugar-love&order=priority')
@@ -76,7 +77,7 @@ class TracBug:
                     people.append(person)
         return people
 
-    def __init__(self, bug_id, BASE_URL):
+    def __init__(self, bug_id, BASE_URL, bitesized_keyword):
         self._bug_specific_csv_data = None
         self._bug_html_page = None
         self._parsed_bug_html_page = None
@@ -84,6 +85,7 @@ class TracBug:
         if not BASE_URL.endswith('/'):
             BASE_URL += '/'
         self.BASE_URL = BASE_URL
+        self.bitesized_keyword = bitesized_keyword
 
     @staticmethod
     def from_url(url):
@@ -143,8 +145,8 @@ class TracBug:
                'submitter_username': trac_data['reporter'],
                'submitter_realname': '', # can't find this in Trac
                'canonical_bug_link': self.as_bug_specific_url(),
-               'good_for_newcomers': ('easy' in trac_data['keywords']),
-               'bite_size_tag_name': 'easy',
+               'good_for_newcomers': (self.bitesized_keyword in trac_data['keywords']),
+               'bite_size_tag_name': self.bitesized_keyword,
                'concerns_just_documentation': False,
                'as_appears_in_distribution': '',
                'last_polled': datetime.datetime.utcnow(),
diff --git a/mysite/customs/tests.py b/mysite/customs/tests.py
index 0b3e1d9..d1f44ac 100644
--- a/mysite/customs/tests.py
+++ b/mysite/customs/tests.py
@@ -726,7 +726,8 @@ class TracBug(django.test.TestCase):
             'type': 'task'}
         tb = mysite.customs.bugtrackers.trac.TracBug(
             bug_id=4298,
-            BASE_URL='http://twistedmatrix.com/trac/')
+            BASE_URL='http://twistedmatrix.com/trac/',
+            bitesized_keyword='easy')
         cached_html_filename = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'twisted-trac-4298-on-2010-04-02.html')
         tb._bug_html_page = unicode(
             open(cached_html_filename).read(), 'utf-8')
@@ -774,7 +775,8 @@ class TracBug(django.test.TestCase):
             'type': 'task'}
         tb = mysite.customs.bugtrackers.trac.TracBug(
             bug_id=4298,
-            BASE_URL='http://twistedmatrix.com/trac/')
+            BASE_URL='http://twistedmatrix.com/trac/',
+            bitesized_keyword='easy')
         cached_html_filename = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'twisted-trac-4298.html')
         tb._bug_html_page = unicode(
             open(cached_html_filename).read(), 'utf-8')
@@ -821,7 +823,8 @@ class TracBug(django.test.TestCase):
             'type': 'task'}
         tb = mysite.customs.bugtrackers.trac.TracBug(
             bug_id=4298,
-            BASE_URL='http://twistedmatrix.com/trac/')
+            BASE_URL='http://twistedmatrix.com/trac/',
+            bitesized_keyword='easy')
         cached_html_filename = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'twisted-trac-4298-without-modified.html')
         tb._bug_html_page = unicode(
             open(cached_html_filename).read(), 'utf-8')
@@ -868,7 +871,8 @@ class TracBug(django.test.TestCase):
             'type': 'task'}
         tb = mysite.customs.bugtrackers.trac.TracBug(
             bug_id=4298,
-            BASE_URL='http://twistedmatrix.com/trac/')
+            BASE_URL='http://twistedmatrix.com/trac/',
+            bitesized_keyword='easy')
         cached_html_filename = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'twisted-trac-4298-without-modified-using-owned-instead-of-assigned.html')
         tb._bug_html_page = unicode(
             open(cached_html_filename).read(), 'utf-8')
diff --git a/mysite/search/management/commands/search_daily_tasks.py b/mysite/search/management/commands/search_daily_tasks.py
index 89dbf0a..e638235 100644
--- a/mysite/search/management/commands/search_daily_tasks.py
+++ b/mysite/search/management/commands/search_daily_tasks.py
@@ -98,21 +98,23 @@ class Command(BaseCommand):
             instantiated = thing()
             instantiated.update()
 
-    def update_trac_instances(self):
+    def find_and_update_enabled_trac_instances(self):
         # Trac instances' update functions
         # Note that each Trac instance has two such functions for now. It would be
         # good to rework the Trac code so it looks more like the RoundupTracker
         # code, with just one .update() method. Another day.
-        trac_instance_functions_to_call = [
+        # FIXME: Twisted and Sugar Labs now migrated to the new-style Trac system.
+        # Remove this? Commented out for now.
+        #trac_instance_functions_to_call = [
             # Sugar
-            mysite.search.tasks.trac_instances.learn_about_new_sugar_easy_bugs,
-            mysite.search.tasks.trac_instances.refresh_all_sugar_easy_bugs,
+        #    mysite.search.tasks.trac_instances.learn_about_new_sugar_easy_bugs,
+        #    mysite.search.tasks.trac_instances.refresh_all_sugar_easy_bugs,
             # Twisted
-            mysite.search.tasks.trac_instances.learn_about_new_easy_twisted_bugs,
-            mysite.search.tasks.trac_instances.refresh_all_twisted_bugs,
-        ]
-        for callable in trac_instance_functions_to_call:
-            callable()
+        #    mysite.search.tasks.trac_instances.learn_about_new_easy_twisted_bugs,
+        #    mysite.search.tasks.trac_instances.refresh_all_twisted_bugs,
+        #]
+        #for callable in trac_instance_functions_to_call:
+        #    callable()
 
         ### And for my next trick...  discover the new-style Trac instances
         enabled_ones = []
@@ -144,7 +146,7 @@ class Command(BaseCommand):
     def handle(self, *args, **options):
         self.update_opensolaris_osnet()
         self.update_launchpad_hosted_projects()
-        self.update_trac_instances()
+        self.find_and_update_enabled_trac_instances()
         self.find_and_update_enabled_roundup_trackers()
         self.update_bugzilla_trackers()
         
diff --git a/mysite/search/tasks/trac_instances.py b/mysite/search/tasks/trac_instances.py
index fbba089..6302a0d 100644
--- a/mysite/search/tasks/trac_instances.py
+++ b/mysite/search/tasks/trac_instances.py
@@ -4,6 +4,9 @@ import logging
 import mysite.search.models
 import mysite.customs.bugtrackers.trac
 
+# FIXME: All the methods below for Twisted and Sugar Labs should now
+# be unnecessary. Delete after confirmation that new style works?
+
 ### Twisted
 def look_at_one_twisted_bug(bug_id):
     """Import one Twisted bug. bug_id is the ticket number in the bug's URL."""
@@ -152,7 +155,8 @@ class TracBugTracker(object):
     def refresh_one_bug_id(self, bug_id):
         tb = mysite.customs.bugtrackers.trac.TracBug(
             bug_id=bug_id,
-            BASE_URL=self.base_url)
+            BASE_URL=self.base_url,
+            bitesized_keyword=self.bitesized_keyword)
         bug_url = tb.as_bug_specific_url()
     
         try:
@@ -175,9 +179,6 @@ class TracBugTracker(object):
             value = data[key]
             setattr(bug, key, value)
 
-        # If the bug has the relevant keyword, mark it as good_for_newcomers
-        ### FIXME: This done by hard-coding in the TracBug class.
-
         # And save the project onto it
         project_from_tb, _ = mysite.search.models.Project.objects.get_or_create(name=tb.component)
         if bug.project_id != project_from_tb.id:
@@ -199,3 +200,237 @@ class TahoeLafsTrac(TracBugTracker):
         return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
             mysite.customs.bugtrackers.trac.csv_of_bugs(
                 'http://tahoe-lafs.org/trac/tahoe-lafs/query?status=assigned&status=new&status=reopened&max=10000&reporter=~&col=id&col=summary&col=keywords&col=reporter&col=status&col=owner&col=type&col=priority&col=milestone&keywords=~&owner=~&desc=1&order=id&format=csv'))
+
+class TwistedTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Twisted',
+                                base_url='http://twistedmatrix.com/trac/',
+                                bitesized_keyword='easy')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        # Just index bitesized bugs
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://twistedmatrix.com/trac/query?status=new&status=assigned&status=reopened&format=csv&keywords=%7Eeasy&order=priority'))
+
+class SugarLabsTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Sugar Labs',
+                                base_url='http://bugs.sugarlabs.org/',
+                                bitesized_keyword='sugar-love')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        # Just index bitesized bugs
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://bugs.sugarlabs.org/query?status=new&status=assigned&status=reopened&format=csv&keywords=%7Esugar-love&order=priority'))
+
+class StatusNetTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='StatusNet',
+                                base_url='http://status.net/trac/',
+                                bitesized_keyword='easy')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        # Only gives a list of bitesized bugs - confirm if devels want all bugs indexed
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://status.net/trac/query?status=accepted&status=assigned&status=new&status=reopened&format=csv&order=priority&keywords=%7Eeasy'))
+
+class XiphTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Xiph.Org',
+                                base_url='http://trac.xiph.org/',
+                                bitesized_keyword='easy') # Unconfirmed, there were no such bugs at the time
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        # Only gives a list of bitesized bugs - confirm if devels want all bugs indexed
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'https://trac.xiph.org/query?status=assigned&status=new&status=reopened&order=priority&format=csv&keywords=%7Eeasy'))
+
+class OLPCTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='OLPC',
+                                base_url='http://dev.laptop.org/',
+                                bitesized_keyword='easy') # Also uses 'sugar-love'.
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://dev.laptop.org/query?status=assigned&status=new&status=reopened&order=priority&format=csv'))
+
+class DjangoTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Django',
+                                base_url='http://code.djangoproject.com/',
+                                bitesized_keyword='easy')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://code.djangoproject.com/query?status=new&status=assigned&status=reopened&order=priority&format=csv'))
+
+class HelenOSTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='HelenOS',
+                                base_url='http://trac.helenos.org/trac.fcgi/',
+                                bitesized_keyword='easy') # Unconfirmed, there were no such bugs at the time
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://trac.helenos.org/trac.fcgi/query?status=accepted&status=assigned&status=new&status=reopened&order=priority&format=csv'))
+
+class Bcfg2Trac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Bcfg2',
+                                base_url='https://trac.mcs.anl.gov/projects/bcfg2/',
+                                bitesized_keyword='easy') # Unconfirmed, there were no such bugs at the time
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'https://trac.mcs.anl.gov/projects/bcfg2/query?status=accepted&status=assigned&status=new&status=reopened&order=priority&format=csv'))
+
+class WarFoundryTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='WarFoundry',
+                                base_url='http://dev.ibboard.co.uk/projects/warfoundry/',
+                                bitesized_keyword='papercut')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://dev.ibboard.co.uk/projects/warfoundry/query?status=accepted&status=assigned&status=confirmed&status=needinfo&status=needinfo_new&status=new&status=reopened&order=priority&format=csv'))
+
+class FedoraPythonModulesTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Fedora Python Modules',
+                                base_url='https://fedorahosted.org/python-fedora/',
+                                bitesized_keyword='')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'https://fedorahosted.org/python-fedora/query?status=new&status=assigned&status=reopened&order=priority&format=csv'))
+
+class AngbandTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Angband',
+                                base_url='http://trac.rephial.org/',
+                                bitesized_keyword='easy') # Unconfirmed, there were no such bugs at the time
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://trac.rephial.org/query?status=assigned&status=confirmed&status=new&status=reopened&order=priority&format=csv'))
+
+class GHCTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='GHC',
+                                base_url='http://hackage.haskell.org/trac/ghc/',
+                                bitesized_keyword='Easy (less than 1 hour)') # FIXME: Does OH support spaces in keywords?
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://hackage.haskell.org/trac/ghc/query?status=new&status=assigned&status=reopened&group=priority&order=id&desc=1&format=csv'))
+
+class TracTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='Trac',
+                                base_url='http://trac.edgewall.org/',
+                                bitesized_keyword='bitesized')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        # Just index bitesized bugs
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://trac.edgewall.org/query?status=!closed&keywords=~bitesized&format=csv'))
+
+class SSSDTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='SSSD',
+                                base_url='https://fedorahosted.org/sssd/',
+                                bitesized_keyword='easy') # They actually use the 'trivial' priority setting
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'https://fedorahosted.org/sssd/query?status=new&status=assigned&status=reopened&order=priority&format=csv'))
+
+class I2PTrac(TracBugTracker):
+    enabled = True
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='I2P',
+                                base_url='http://trac.i2p2.de/',
+                                bitesized_keyword='easy') # Unconfirmed, there were no such bugs at the time
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                'http://trac.i2p2.de/query?status=accepted&status=assigned&status=new&status=reopened&order=priority&format=csv'))
+
+# Copy this generic class to add a new Trac bugtracker
+# Remember to set 'enabled' to True
+# Notes:
+# Base URL: the URL of a bug for the bugtracker, without the 'ticket/1234'
+# Tracking URL: go to BASE_URL/query and search for the bugs you want tracked
+class GenTrac(TracBugTracker):
+    enabled = False
+
+    def __init__(self):
+        TracBugTracker.__init__(self,
+                                project_name='',
+                                base_url='',
+                                bitesized_keyword='')
+
+    def generate_list_of_bug_ids_to_look_at(self):
+        return mysite.customs.bugtrackers.trac.csv_url2list_of_bug_ids(
+            mysite.customs.bugtrackers.trac.csv_of_bugs(
+                ''))
-- 
1.7.1

