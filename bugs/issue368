<!-- dollarId: issue.item,v 1.4 2001/08/03 01:19:43 richard Exp dollar-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>
Issue 368: Bug objects should know how to refresh themselves - Roundup issue tracker

</title>
<link rel="stylesheet" type="text/css" href="@@file/style.css">
<meta http-equiv="Content-Type"
      content="text/html; charset=utf-8" />

<script type="text/javascript">
submitted = false;
function submit_once() {
    if (submitted) {
        alert("Your request is being processed.\nPlease be patient.");
        event.returnValue = 0;    // work-around for IE
        return 0;
    }
    submitted = true;
    return 1;
}

function help_window(helpurl, width, height) {
    HelpWin = window.open('https://openhatch.org/bugs/' + helpurl, 'RoundupHelpWindow', 'scrollbars=yes,resizable=yes,toolbar=no,height='+height+',width='+width);
}
</script>



</head>
<body class="body">

<table class="body">

<tr>
 <td class="page-header-left"><a href="/" title="OpenHatch"><img src="/static/images/the-logo-bluegreen-87px.png" width="87" height="60" alt="openhatch" /></a></td>
 <td class="page-header-top">
   <div id="body-title">
     <h2>
 
 
 Issue368
 
</h2>
   </div>
   <div id="searchbox">
     <form method="GET" action="issue">
       <input type="hidden" name="@columns"
              value="id,activity,title,creator,assignedto,status,milestone" />
       <input type="hidden" name="@sort" value="activity" />
       <input type="hidden" name="@group" value="priority" />
       <input id="search-text" name="@search_text" size="10" />
       <input type="submit" id="submit" name="submit"
              value="Search" />
     </form>
  </div>
 </td>
</tr>

<tr>
 <td rowspan="2" valign="top" class="sidebar">
  

  <p class="classblock">
    <b>This month: 0.13.10</b><br>
    <a href="/wiki/0.13.10">Goals (in wiki)</a><br>
    <a href="milestone19?@template=open">Bug list</a>
  </p>

  <form method="POST" action="https://openhatch.org/bugs/">
   <p class="classblock">
    <b>Issues</b><br>
    
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@columns=id,activity,title,creator,status,milestone&amp;assignedto=-1&amp;@group=priority&amp;@dispname=Show Unassigned&amp;@filter=status,assignedto&amp;@pagesize=50&amp;@startwith=0">Show Unassigned</a><br>
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@dispname=Show All&amp;@filter=status&amp;@group=priority&amp;@columns=id,activity,title,creator,assignedto,status,milestone&amp;@pagesize=50&amp;@startwith=0">Show All</a><br>
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@columns=id,activity,title,creator,assignedto,status,milestone&amp;@dispname=Show Bitesized&amp;keyword=1&amp;@group=priority&amp;@filter=status,keyword&amp;@pagesize=50&amp;@startwith=0">Show Bitesized</a><br>
    <a href="issue?@template=search">Search</a><br>
    <input type="submit" class="form-small"
           value="Show issue:"><input class="form-small" size="4" type="text" name="@number">
    <input type="hidden" name="@type" value="issue">
    <input type="hidden" name="@action" value="show">
   </p>
  </form>

  

  

  

   <p class="userblock">
    <b>Login</b><br>
    <a href="https://openhatch.org/account/login/?next=/bugs/issue368">Click here to login.</a>
   </p>

  
  <p class="userblock">
   <b>Help</b><br>
   <a href="http://www.roundup-tracker.org/docs.html">Bug tracker docs</a>
  </p>
 </td>
 <td>
  
  
 </td>
</tr>
<tr>
 <td class="content">





<div>

<form method="POST" name="itemSynopsis"
      onsubmit="return submit_once()"
      enctype="multipart/form-data" action="issue368">

<table class="form">
<tr>
 <th class="required">Title</th>
 <td colspan="3">Bug objects should know how to refresh themselves</td>
</tr>

<tr>
 <th>Milestone</th>
 <td>0.11.03</td>
 <th class="required">Priority</th>
 <td>urgent</td>
</tr>

<tr>
 <th>Waiting On</th>
 <td>
  
  
  
 </td>
 <th>Status</th>
 <td>resolved</td>
</tr>

<tr>
 <th>Superseder</th>
 <td>
  
  
  
 </td>
 <th>Nosy List</th>
 <td>
  paulproteus, pythonian4000
  <br>
 </td>
</tr>

<tr>
 <th>Assigned To</th>
 <td>paulproteus</td>
 <th>Keywords</th>
 <td>
  
  
 </td>
</tr>







</table>
</form>



<p>Created on <b>2011-04-05.22:34:02</b> by <b>pythonian4000</b>, last changed <b>2011-04-09.06:49:57</b> by <b>paulproteus</b>.</p>

<table class="files">
 <tr><th colspan="5" class="header">Files</th></tr>
 <tr>
  <th>File name</th>
  <th>Uploaded</th>
  <th>Type</th>
  <th>Edit</th>
  <th>Remove</th>
 </tr>
 <tr>
  <td>
   <a href="file203/fix_for_patch_0007.patch">fix_for_patch_0007.patch</a>
  </td>
  <td>
   <span>pythonian4000</span>,
   <span>2011-04-08.22:57:26</span>
  </td>
  <td>text/x-patch</td>
  <td>
  </td>
  <td>
   
  </td>
 </tr>
 <tr>
  <td>
   <a href="file202/patches.tar.gz">patches.tar.gz</a>
  </td>
  <td>
   <span>paulproteus</span>,
   <span>2011-04-08.20:17:16</span>
  </td>
  <td>application/x-gzip</td>
  <td>
  </td>
  <td>
   
  </td>
 </tr>
</table>

<table class="messages">
 <tr><th colspan="4" class="header">Messages</th></tr>
 
  <tr>
   <th><a href="msg1442">msg1442 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-04-09.06:49:56</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>This backend change is pushed now! Thanks Jack for the fix; that was a total
n00b mistake on my part.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg1441">msg1441 (view)</a></th>
   <th>Author: pythonian4000</th>
   <th>Date: 2011-04-08.22:57:26</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>I'm liking this. Aside from the fact that nearly all of this code will be moved
around, renamed etc. with the async stuff, I think it's great.

Your patch series is all fine, except for (after applying all patches) line 554
in search/models.py:

return cls(pk=self.bug_tracker_model_pk).create_class_that_can_actually_crawl_bugs()

cls(pk=self.bug_tracker_model_pk) results in an instance of the model class that
happens to have the same pk as an existing instance, rather than the actual
existing instance as you require. Of course, this isn't a problem because you
never save this instance, but there is absolutely no other data in there. Since
bot existing database tracker models have a manager named "all_trackers", the
modification to line 554 in the extra patch I uploaded fixes everything.

(On a related note, it's a very weird feeling to be on the other side of a patch
review! =D )</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg1439">msg1439 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-04-08.20:17:16</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>Hey Jack,

I am running into some issues implementing this, and instead of banging my head
against it for any longer, I thought I'd ask if you could help.

The final commit in the series is the broken one. Can you give it a look? The
commit log message explains what I was trying to do.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg1438">msg1438 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-04-08.15:09:28</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>I'm working on this now! And posting to [Devel] about it.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg1430">msg1430 (view)</a></th>
   <th>Author: pythonian4000</th>
   <th>Date: 2011-04-05.22:34:02</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>As part of keeping the Bugs in the database all fresh, we need to be able to get
all Bug objects that at the current point in time are stale. This was done
previously in segments via the tracker class that created and updated those
Bugs, but due to differences in ordering there would always be bugs that were
fresh by a few seconds and got missed, which now causes Nagios to spam us with
messages about stale Bugs.

As part of the move to asynchronous bug importing, we want to move this query to
the Bug model. The issue currently though is that, while we can easily obtain a
list of stale Bugs with some simple QuerySet manipulation, there is no way of
finding the code that updates them.

A solution to this is to have a ForeignKey in the Bug model that points to the
database model for the tracker that created it. This would mean that Bug objects
could be easily refreshed when stale, and then Nagios would stop complaining all
the time (until we move over to the asynchronous system and get a heap of bugs
that is!). In the case of trackers that have to be hard-coded (read: NEARLY
EVERY Bugzilla tracker ~_~ ), once the asynchronous code is set up they will be
represented by a database model as well, which just has a string pointing to the
hard-coded class. But for now, they can be a small minority not covered in this
issue.

Below is the relevant discussion from PiratePad between pythonian4000 and
paulproteus:

I see this as being in two parts:
 * The code looks for stale tracker queries to update.
 * The code looks for stale bugs to update. &lt;-- but Bug objects do not typically
know how to update themselves, iirc &lt;-- and this needs changing, possibly by
adding a ForeignKey to the tracaker object that created them (since this is the
only way Bugs are introduced to the system). but some bugs are created through
hard-coded classes. I'd be okay with storing those class names as strings, or
something (and there will probably always be some of those for e.g. Bugzilla
instances) I do agree there, but I struggle to work out a better way to manage
this asynchronously (otherwise we need  to keep the async code individual to
each specific tracker (subclassing, where possible? (not by my understanding of
Twisted -- take a look at "class ProfileImporter" in
mysite.customs.profile_importers-- we only override methods as needed, and the
Twisted callback is usually a bound instance method)
  * I'm trying to remember my reasoning: If I want to update all stale URLs,
this information is stored along with the tracker required to update them. But
if I want to update all currently stale bugs, I can (without knowing anything
else) get a list of all such bugs. But it is tying them to the required subclass
of a subclass of a general async tracker instance that is the problem,
especially if such instances are auto-generated on-the-fly.
   * make the class_name a string, and try to __import__() and instantiate that
   * and that doesn't work, try to decode the class string as some sort of hint
as to how to create it from the database
   * So some class_name attributes look like "__TracTracker__,id=13" (those are
the ones you get from the database) and others look like
'mysite.customs.bugtrackers.bugzillas.MozillaDotOrg' (that's one to instantiate
from code)
   * downside, it's not then a true foreign key
    * Can't we just drop Bugzilla support, since this is all its fault anyway? ;P
    * We could also create a special BugzillaTrackerThatIsHardcoded model, and
that could have an attribute for the string form of the class name. Then
Bugzilla trackers that are hard-coded appear in the DB, too, which is good for
the UI. But when we *use* them, we know to grab special methods from the code.
     * I like the above!
     * So do I!
      * yay!
      * There is also a single Google model hard-coded but I believe that is
because it has three tags meaning 'bite-sized'. But if we can work out how to
store this in the database then it fixes that.
       * And we can always do the same thing as Bugzilla for other tracker
types, but Bugzilla is the one that NEEDS it ^_^
        * precisely. Want to remove this conversation and turn it into a
decision, then sprinkle that into the thread above?
        * Aww, reached indent limit =D
        * I say do the decisioning and sprinkling first, then remove this later.
        * kay</pre>
   </td>
  </tr>
 
</table>

<table class="history"><tr><th colspan="4" class="header">
History
</th></tr><tr>
<th>Date</th>
<th>User</th>
<th>Action</th>
<th>Args</th>
</tr>
<tr><td>2011-04-09&nbsp;06:49:57</td><td>paulproteus</td><td>unlink</td><td><a href="issue363">issue363 blockers</a></td></tr>
<tr><td>2011-04-09&nbsp;06:49:57</td><td>paulproteus</td><td>unlink</td><td><a href="issue260">issue260 blockers</a></td></tr>
<tr><td>2011-04-09&nbsp;06:49:57</td><td>paulproteus</td><td>set</td><td>status: in-progress -> resolved<br />messages:
  + <a href="msg1442">msg1442</a></td></tr>
<tr><td>2011-04-08&nbsp;22:57:26</td><td>pythonian4000</td><td>set</td><td>files:
  + <a href="file203">fix_for_patch_0007.patch</a><br />messages:
  + <a href="msg1441">msg1441</a></td></tr>
<tr><td>2011-04-08&nbsp;20:17:17</td><td>paulproteus</td><td>set</td><td>files:
  + <a href="file202">patches.tar.gz</a><br />messages:
  + <a href="msg1439">msg1439</a></td></tr>
<tr><td>2011-04-08&nbsp;15:09:28</td><td>paulproteus</td><td>set</td><td>status: unread -> in-progress<br />messages:
  + <a href="msg1438">msg1438</a></td></tr>
<tr><td>2011-04-05&nbsp;22:41:27</td><td>pythonian4000</td><td>link</td><td><a href="issue260">issue260 blockers</a></td></tr>
<tr><td>2011-04-05&nbsp;22:39:37</td><td>pythonian4000</td><td>link</td><td><a href="issue363">issue363 blockers</a></td></tr>
<tr><td>2011-04-05&nbsp;22:34:02</td><td>pythonian4000</td><td>create</td><td></td></tr>
</table>

</div>

</td>
</tr>

</table>



</body>
</html>

<!-- SHA: cef943195fefd743431d22c020eef27edd6255e1 -->
