<!-- dollarId: issue.item,v 1.4 2001/08/03 01:19:43 richard Exp dollar-->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<title>
Issue 506: New way of marking Mozilla bugs as being bitesize - Roundup issue tracker

</title>
<link rel="stylesheet" type="text/css" href="@@file/style.css">
<meta http-equiv="Content-Type"
      content="text/html; charset=utf-8" />

<script type="text/javascript">
submitted = false;
function submit_once() {
    if (submitted) {
        alert("Your request is being processed.\nPlease be patient.");
        event.returnValue = 0;    // work-around for IE
        return 0;
    }
    submitted = true;
    return 1;
}

function help_window(helpurl, width, height) {
    HelpWin = window.open('https://openhatch.org/bugs/' + helpurl, 'RoundupHelpWindow', 'scrollbars=yes,resizable=yes,toolbar=no,height='+height+',width='+width);
}
</script>



</head>
<body class="body">

<table class="body">

<tr>
 <td class="page-header-left"><a href="/" title="OpenHatch"><img src="/static/images/the-logo-bluegreen-87px.png" width="87" height="60" alt="openhatch" /></a></td>
 <td class="page-header-top">
   <div id="body-title">
     <h2>
 
 
 Issue506
 
</h2>
   </div>
   <div id="searchbox">
     <form method="GET" action="issue">
       <input type="hidden" name="@columns"
              value="id,activity,title,creator,assignedto,status,milestone" />
       <input type="hidden" name="@sort" value="activity" />
       <input type="hidden" name="@group" value="priority" />
       <input id="search-text" name="@search_text" size="10" />
       <input type="submit" id="submit" name="submit"
              value="Search" />
     </form>
  </div>
 </td>
</tr>

<tr>
 <td rowspan="2" valign="top" class="sidebar">
  

  <p class="classblock">
    <b>This month: 0.13.10</b><br>
    <a href="/wiki/0.13.10">Goals (in wiki)</a><br>
    <a href="milestone19?@template=open">Bug list</a>
  </p>

  <form method="POST" action="https://openhatch.org/bugs/">
   <p class="classblock">
    <b>Issues</b><br>
    
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@columns=id,activity,title,creator,status,milestone&amp;assignedto=-1&amp;@group=priority&amp;@dispname=Show Unassigned&amp;@filter=status,assignedto&amp;@pagesize=50&amp;@startwith=0">Show Unassigned</a><br>
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@dispname=Show All&amp;@filter=status&amp;@group=priority&amp;@columns=id,activity,title,creator,assignedto,status,milestone&amp;@pagesize=50&amp;@startwith=0">Show All</a><br>
    <a href="issue?status=-1,1,2,3,4,5,6,7,9,10&amp;@sort=-activity&amp;@search_text=&amp;@columns=id,activity,title,creator,assignedto,status,milestone&amp;@dispname=Show Bitesized&amp;keyword=1&amp;@group=priority&amp;@filter=status,keyword&amp;@pagesize=50&amp;@startwith=0">Show Bitesized</a><br>
    <a href="issue?@template=search">Search</a><br>
    <input type="submit" class="form-small"
           value="Show issue:"><input class="form-small" size="4" type="text" name="@number">
    <input type="hidden" name="@type" value="issue">
    <input type="hidden" name="@action" value="show">
   </p>
  </form>

  

  

  

   <p class="userblock">
    <b>Login</b><br>
    <a href="https://openhatch.org/account/login/?next=/bugs/issue506">Click here to login.</a>
   </p>

  
  <p class="userblock">
   <b>Help</b><br>
   <a href="http://www.roundup-tracker.org/docs.html">Bug tracker docs</a>
  </p>
 </td>
 <td>
  
  
 </td>
</tr>
<tr>
 <td class="content">





<div>

<form method="POST" name="itemSynopsis"
      onsubmit="return submit_once()"
      enctype="multipart/form-data" action="issue506">

<table class="form">
<tr>
 <th class="required">Title</th>
 <td colspan="3">New way of marking Mozilla bugs as being bitesize</td>
</tr>

<tr>
 <th>Milestone</th>
 <td>later</td>
 <th class="required">Priority</th>
 <td>feature</td>
</tr>

<tr>
 <th>Waiting On</th>
 <td>
  
  
  
 </td>
 <th>Status</th>
 <td>chatting</td>
</tr>

<tr>
 <th>Superseder</th>
 <td>
  
  
  
 </td>
 <th>Nosy List</th>
 <td>
  jdm, jessica, paulproteus
  <br>
 </td>
</tr>

<tr>
 <th>Assigned To</th>
 <td>paulproteus</td>
 <th>Keywords</th>
 <td>
  
  
 </td>
</tr>







</table>
</form>



<p>Created on <b>2011-08-02.21:27:22</b> by <b>paulproteus</b>, last changed <b>2011-12-06.00:33:36</b> by <b>paulproteus</b>.</p>

<table class="files">
 <tr><th colspan="5" class="header">Files</th></tr>
 <tr>
  <th>File name</th>
  <th>Uploaded</th>
  <th>Type</th>
  <th>Edit</th>
  <th>Remove</th>
 </tr>
 <tr>
  <td>
   <a href="file378/diff.txt">diff.txt</a>
  </td>
  <td>
   <span>jessica</span>,
   <span>2011-08-04.03:24:58</span>
  </td>
  <td>text/plain</td>
  <td>
  </td>
  <td>
   
  </td>
 </tr>
</table>

<table class="messages">
 <tr><th colspan="4" class="header">Messages</th></tr>
 
  <tr>
   <th><a href="msg2801">msg2801 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-12-06.00:33:35</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>Will deal with the mentorship part separately. Moving this into 'later' since
0.11.11 is due today.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2780">msg2780 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-12-04.22:21:40</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>I'm going to separate this into two tickets: One for the "Bug has mentors
available", and another for "This is bitesized."</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2690">msg2690 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-11-14.02:12:50</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>We should make sure this gets done during 0.11.11!</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2250">msg2250 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-08-04.13:38:39</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>On Thu, 4 Aug 2011, Jessica Ledbetter wrote:

&gt; I tried running tests but don't think I'm running the right ones.
&gt;
&gt; ./bin/mysite customs_debugger help
&gt; from
&gt; <a href="https://openhatch.org/wiki/Bug_tracker_import_code/adding_a_bug_tracker">https://openhatch.org/wiki/Bug_tracker_import_code/adding_a_bug_tracker</a>
&gt;
&gt; shows how to list old bugs, closed bugs, but not "stuff you just added" like a
&gt; diff. I have a bug that should show up before and after the change and a bug
&gt; that will be new after the change. I test by manually typing it in the search
&gt; after running:
&gt;
&gt; ./bin/mysite customs_daily_tasks

That is running the code, not running the test suite.

&gt; But this runs them all. Isn't there a way just to run the one added?

I actually think there is -- read the source of customs_daily_tasks.py. If 
so, it should be visible there.

&gt; Or are you saying that I need to add a test_mozilla (like test_kde) under
&gt; BugzillaTests in customs/tests.py?

Indeed *this* is what I'm saying. Add a test method called (e.g.)

test_mozilla_bitesize_bug_detected_correctly()

and then run it with:

./bin/mysite test customs.TheClassNameWhereYouAddedTheMethod.method_name

&gt; Another question after the IRC chat :)
&gt;
&gt; What's 'good_for_newcomers' and 'bite_size_tag_name' for? I saw it on the Bug
&gt; model. You said that when it goes back through that it checks to make sure that
&gt; it is still bite sized by looking for the text that is assigned to it.

bite_size_tag_name is useless. In fact, I don't see it ever *read* 
anywhere, only written-to. I'm kind of confused.

good_for_newcomers is displayed in the web UI as "bitesize" -- that's the 
important field.

&gt; So how to say that it the whiteboard_text could be one or the other?
&gt;
&gt; Doesn't seem to be:
&gt; ret_dict['good_for_newcomers'] = (whiteboard_text == '[good first bug]' or
&gt; whiteboard_text == '[mentor=')

For one thing, I would separate this out into multiple lines.

Second, I think you want:

('good first bug' in whiteboard_text)

not the == comparison.

Simialr story for the mentor= check.

&gt; It seems to stop at [good first bug] and not get [mentor=

You could use more parens. But really, here's what I would do:

* Start by making this a few lines long.

* If that doesn't do what you want, write a function like:

def _mozilla_bug_looks_bitesized(text):
    if text == '[good_first_bug]':
      return True
    # handle more cases...
    return False # by default

and if *that* doesn't do what you want, play with it in the interpreter.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2249">msg2249 (view)</a></th>
   <th>Author: jessica</th>
   <th>Date: 2011-08-04.03:24:58</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>Another question after the IRC chat :)

What's 'good_for_newcomers' and 'bite_size_tag_name' for? I saw it on the Bug
model. You said that when it goes back through that it checks to make sure that
it is still bite sized by looking for the text that is assigned to it. 

So how to say that it the whiteboard_text could be one or the other?

Doesn't seem to be:
ret_dict['good_for_newcomers'] = (whiteboard_text == '[good first bug]' or
whiteboard_text == '[mentor=')

It seems to stop at [good first bug] and not get [mentor=</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2246">msg2246 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-08-03.22:36:04</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>On Tue, 2 Aug 2011, Jessica Ledbetter wrote:

&gt; Since I have been wanting to get into the bug tracker code to get 
&gt; Lighthouse in there and I &lt;3 Mozilla, I grabbed this. But my lack of 
&gt; knowledge of the bugtracker code is obvious now :)
&gt;
&gt; I thought, "Oh! I'll do a regexp!" Works in the browser but when running 
&gt; in the bug tracker code, it doesn't.

Meta-commentary:

In general, submit patches. It doesn't have to be beautiful git 
format-patch stuff; just the output of 'git diff' is helpful. Similarly, 
you could push your work to a Gitorious or Github fork; that would be 
quite helpful too.

&gt; New easy bug url:
&gt; <a href="https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=regexp;query_format=advanced;status_whiteboard=good%20first%20bug">https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=regexp;query_format=advanced;status_whiteboard=good%20first%20bug</a>|mentor
&gt;
&gt; Old new easy bug url:
&gt; <a href="https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=substring;query_format=advanced;status_whiteboard=">https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=substring;query_format=advanced;status_whiteboard=</a>[good%20first%20bug]

This seems reasonably good. It does work in the browser!

&gt; I saw some bugs don't have brackets but still are "good first bug" so 
&gt; this gets them too.

Nice. IMHO that by itself should be a separate commit.

&gt;
&gt; -----------------Begin Code------------------------------------------
&gt; def generate_current_bug_xml(self):
&gt;        queries = {
&gt;                'Easy bugs':
&gt;                    '
&gt; <a href="https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=regexp;query_format=advanced;status_whiteboard=good%20first%20bug">https://bugzilla.mozilla.org/buglist.cgi?resolution=---;status_whiteboard_type=regexp;query_format=advanced;status_whiteboard=good%20first%20bug</a>|mentor
&gt; ',
&gt;                #'Documentation bugs':
&gt;                    #''
&gt;                }
&gt;        return self.generate_bug_xml_from_queries(queries)
&gt;
&gt;    @staticmethod
&gt;    def extract_tracker_specific_data(xml_data, ret_dict):
&gt;        # Make modifications to ret_dict using provided metadata
&gt;        # Check for the bitesized keyword
&gt;        whiteboard_text =
&gt; mysite.customs.bugtrackers.bugzilla.get_tag_text_from_xml(xml_data,
&gt; 'status_whiteboard')
&gt;        ret_dict['good_for_newcomers'] = (whiteboard_text == 'good first
&gt; bug')
&gt;        ret_dict['bite_size_tag_name'] = 'good first bug'
&gt;        # Then pass ret_dict back
&gt;        return ret_dict
&gt;
&gt;
&gt; -----------End Code----------------------

What do you mean that it doesn't work in the code?

Also, FWIW, I would make there be two queries here -- one for the 
whiteboard good_first_bug, the other for mentor. It's just easier to read 
that way. Also, it's nice if we don't do a regexp query against their 
Bugzilla if possible; those are really slow for them to execute.

&gt; So, can I just say "All these bugs are good. Just take 'em." Or do I have to
&gt; say that the whiteboard_text will have 'good first bug' or 'mentor' again in
&gt; extract_tracker_specific_data even though that should be all we have from
&gt; the 'easy bugs' url?

The idea is that extract_tracker_specific_data() is called whenever a bug 
is refreshed. So you do have to repeat the whiteboard_text constraint. 
Here's why:

* Day 1: A new bug comes in from the search. It is obviously a good first 
bug.

* Day 2: Nothing happens.

* Day 3: We do our periodic refreshing of bug data. We download the bug 
XML, and we discover that the whiteboard status is still 'good 
first bug'. We leave the bug as good_for_newcomers.

* Day 4: Someone at Mozilla realizes that the bug is bad for newcomers and 
removes the whiteboard status.

* Day 5: We do our periodic refreshing of bug data. We download the bug 
XML, and we discover the whiteboard status is the empty string. We set the 
bug as good_for_newcomers=False.

&gt; I saw this comment, "It doesn't matter what type of query url
&gt;    # is stored, since the incorrectly generated method will not be used
&gt;    # anyway when bt.query_url_type is checked later."

Okay, wow, I have *no* idea what that refers to.

/me reads the source...

I don't really understand what that refers to, but I don't think it's 
relevant here.

When you tried things, what exactly "didn't work"?

&gt; So maybe that's why?
&gt;
&gt; Thank you in advance for the help :) I'm really tired so probably missing
&gt; something so simple. :)

One other thing here: I really suggest dealing with issues like this 
through the test suite also.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2243">msg2243 (view)</a></th>
   <th>Author: jdm</th>
   <th>Date: 2011-08-02.21:30:25</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>If the indexer could search for bugs with mentor= in the whiteboard, that would
be a great solution. We don't necessarily want to replace the existing search
for bugs with "good first bug" in the whiteboard, since not everyone in Mozilla
has converted to using the new mentored marking yet.</pre>
   </td>
  </tr>
 
 
  <tr>
   <th><a href="msg2241">msg2241 (view)</a></th>
   <th>Author: paulproteus</th>
   <th>Date: 2011-08-02.21:27:21</th>
   <th>
    
   </th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    <pre>There's a new way of marking bugs in Mozilla projects as bitesized. They emailed
us to say:

We've recently started a new movement to add
[<a href="mailto:mentor=stringofcharactersthatmaybeanemail@ornot.com">mentor=stringofcharactersthatmaybeanemail@ornot.com</a>] in the whiteboard of bugs
on bugzilla.mozilla.org that have a mentor associated with them.  It would be
swell to get them indexed by OpenHatch.

So we should have a way to show that!</pre>
   </td>
  </tr>
 
</table>

<table class="history"><tr><th colspan="4" class="header">
History
</th></tr><tr>
<th>Date</th>
<th>User</th>
<th>Action</th>
<th>Args</th>
</tr>
<tr><td>2011-12-06&nbsp;00:33:36</td><td>paulproteus</td><td>set</td><td>title: New way of marking Mozilla bugs as having mentors -> New way of marking Mozilla bugs as being bitesize<br />messages:
  + <a href="msg2801">msg2801</a><br />milestone: <a href="milestone13">0.11.11</a> -> <a href="milestone1">later</a></td></tr>
<tr><td>2011-12-04&nbsp;22:21:40</td><td>paulproteus</td><td>set</td><td>assignedto: <a href="user96">jessica</a> -> <a href="user3">paulproteus</a><br />messages:
  + <a href="msg2780">msg2780</a></td></tr>
<tr><td>2011-11-14&nbsp;02:12:51</td><td>paulproteus</td><td>set</td><td>messages:
  + <a href="msg2690">msg2690</a><br />milestone: <a href="milestone13">0.11.11</a></td></tr>
<tr><td>2011-08-04&nbsp;13:38:40</td><td>paulproteus</td><td>set</td><td>messages:
  + <a href="msg2250">msg2250</a></td></tr>
<tr><td>2011-08-04&nbsp;03:24:59</td><td>jessica</td><td>set</td><td>files:
  + <a href="file378">diff.txt</a><br />messages:
  + <a href="msg2249">msg2249</a></td></tr>
<tr><td>2011-08-04&nbsp;03:11:58</td><td>jessica</td><td>set</td><td>messages:
  - <a href="msg2248">msg2248</a></td></tr>
<tr><td>2011-08-04&nbsp;01:52:16</td><td>jessica</td><td>set</td><td>messages:
  + <a href="msg2248">msg2248</a></td></tr>
<tr><td>2011-08-03&nbsp;22:36:06</td><td>paulproteus</td><td>set</td><td>messages:
  + <a href="msg2246">msg2246</a></td></tr>
<tr><td>2011-08-02&nbsp;23:05:45</td><td>jessica</td><td>set</td><td>assignedto: <a href="user96">jessica</a></td></tr>
<tr><td>2011-08-02&nbsp;22:49:53</td><td>jessica</td><td>set</td><td>nosy:
  + <a href="user96">jessica</a></td></tr>
<tr><td>2011-08-02&nbsp;21:30:44</td><td>jdm</td><td>set</td><td>nosy:
  + <a href="user13">jdm</a></td></tr>
<tr><td>2011-08-02&nbsp;21:30:25</td><td>jdm</td><td>set</td><td>status: unread -> chatting<br />messages:
  + <a href="msg2243">msg2243</a></td></tr>
<tr><td>2011-08-02&nbsp;21:27:22</td><td>paulproteus</td><td>create</td><td></td></tr>
</table>

</div>

</td>
</tr>

</table>



</body>
</html>

<!-- SHA: cef943195fefd743431d22c020eef27edd6255e1 -->
