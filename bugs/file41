From d8a2bc64f76c2b3ecd647f767bc71b4585c0f4e1 Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Mon, 28 Jun 2010 02:40:36 +0000
Subject: [PATCH 1/4] Correct "zero_hour" to "zero_o_clock" in search.tests.TestEpoch

---
 mysite/search/tests.py |   11 +++++------
 1 files changed, 5 insertions(+), 6 deletions(-)

diff --git a/mysite/search/tests.py b/mysite/search/tests.py
index 1d492ca..5c71bab 100644
--- a/mysite/search/tests.py
+++ b/mysite/search/tests.py
@@ -4,7 +4,6 @@ import mysite.base.unicode_sanity
 import mysite.account.tests
 from mysite.profile.models import Person
 import mysite.profile.models
-import mysite.customs.miro
 import mysite.search.controllers
 from mysite.search.models import Project, Bug, HitCountCache, \
         ProjectInvolvementQuestion, Answer, BugAlert
@@ -1619,7 +1618,7 @@ class TestEpoch(TwillTests):
     def test_on_mark_looks_closed(self):
         # There's no Epoch for bugs yet, right?
         now = mysite.search.models.Epoch.get_for_model(mysite.search.models.Bug)
-        self.assertEqual(now, mysite.search.models.Epoch.zero_hour)
+        self.assertEqual(now, mysite.search.models.Epoch.zero_o_clock)
 
         # Making a Bug should not bump the Epoch
         p = mysite.search.models.Project.create_dummy()
@@ -1627,7 +1626,7 @@ class TestEpoch(TwillTests):
 
         now = mysite.search.models.Epoch.get_for_model(mysite.search.models.Bug)
         self.assertEqual(now,
-                         mysite.search.models.Epoch.zero_hour)
+                         mysite.search.models.Epoch.zero_o_clock)
 
         # Setting the bug to looks_closed should bump the Epoch
         b.looks_closed = True
@@ -1635,12 +1634,12 @@ class TestEpoch(TwillTests):
 
         # Now it's higher, right?
         now = mysite.search.models.Epoch.get_for_model(mysite.search.models.Bug)
-        self.assert_(now > mysite.search.models.Epoch.zero_hour)
+        self.assert_(now > mysite.search.models.Epoch.zero_o_clock)
 
     def test_on_delete(self):
         # There's no Epoch for bugs yet, right?
         now = mysite.search.models.Epoch.get_for_model(mysite.search.models.Bug)
-        self.assertEqual(now, mysite.search.models.Epoch.zero_hour)
+        self.assertEqual(now, mysite.search.models.Epoch.zero_o_clock)
 
         # Making a Bug should not bump the Epoch
         p = mysite.search.models.Project.create_dummy()
@@ -1648,7 +1647,7 @@ class TestEpoch(TwillTests):
 
         now = mysite.search.models.Epoch.get_for_model(mysite.search.models.Bug)
         self.assertEqual(now,
-                         mysite.search.models.Epoch.zero_hour)
+                         mysite.search.models.Epoch.zero_o_clock)
 
         # Deleting that Bug should bump the Epoch
         b.delete()
-- 
1.7.1


From 39318be8c889f17421cd7c86a9d343469da19e32 Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Mon, 28 Jun 2010 03:13:20 +0000
Subject: [PATCH 2/4] Added catch to clean_lp_data_dict in launchpad_crawl.py so it doesn't break on lack of tags.

---
 mysite/search/launchpad_crawl.py |    8 ++++++--
 1 files changed, 6 insertions(+), 2 deletions(-)

diff --git a/mysite/search/launchpad_crawl.py b/mysite/search/launchpad_crawl.py
index 3e35463..e679cda 100644
--- a/mysite/search/launchpad_crawl.py
+++ b/mysite/search/launchpad_crawl.py
@@ -94,8 +94,12 @@ def clean_lp_data_dict(lp_data_dict):
     new_data['last_polled'] = datetime.datetime.now()
 
     # Look for bitesize tag
-    if 'bitesize' in lp_data_dict['tags']:
-        new_data['good_for_newcomers'] = True
+    # If no 'tags', pass
+    try:
+        if 'bitesize' in lp_data_dict['tags']:
+            new_data['good_for_newcomers'] = True
+    except KeyError:
+        pass
 
     status =  lp_data_dict.get('status', 'Unknown')
     if not status:
-- 
1.7.1


From 0fabd912787d6a471e72da06c35557a9fa0a1146 Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Mon, 28 Jun 2010 03:17:51 +0000
Subject: [PATCH 3/4] Removed defunct test of old Sugar Labs importer from search/tests.py

---
 mysite/search/tests.py |    8 --------
 1 files changed, 0 insertions(+), 8 deletions(-)

diff --git a/mysite/search/tests.py b/mysite/search/tests.py
index 5c71bab..f674c14 100644
--- a/mysite/search/tests.py
+++ b/mysite/search/tests.py
@@ -1663,14 +1663,6 @@ class BugKnowsItsFreshness(TestCase):
             days=1, hours=1)
         self.assertFalse(b.data_is_more_fresh_than_one_day())
         
-class SugarLabsOnline(TestCase):
-    def test(self):
-        bug_id = 1854
-        self.assertFalse(mysite.search.models.Bug.open_ones.all())
-        mysite.search.tasks.trac_instances.look_at_sugar_labs_bug(bug_id=bug_id)
-        bug = mysite.search.models.Bug.open_ones.get()
-        self.assertEqual(bug.title, "save as html doesn't convert & to &gt;")
-
 class WeCanPollSomethingToCheckIfAProjectIconIsLoaded(TestCase):
     def test(self):
         # Create a dummy project
-- 
1.7.1


From 9ea53c9e2a1c3598c0495d75747f2e41bd97b07c Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Mon, 28 Jun 2010 04:27:13 +0000
Subject: [PATCH 4/4] Modified test_select_a_project_and_see_other_project_options to compare two
 sorted lists instead of one sorted and one not - data content matters, not
 the order in the list.

---
 mysite/search/tests.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/mysite/search/tests.py b/mysite/search/tests.py
index f674c14..f5de8dc 100644
--- a/mysite/search/tests.py
+++ b/mysite/search/tests.py
@@ -1038,7 +1038,7 @@ class QueryGetPossibleProjectFacetOptions(SearchTest):
         query = mysite.search.controllers.Query.create_from_GET_data(GET_data)
         possible_project_names = [x['name'] for x in dict(query.get_possible_facets())['project']['options']]
         self.assertEqual(
-                possible_project_names,
+                sorted(possible_project_names),
                 sorted(list(Project.objects.values_list('name', flat=True))))
 
 class QueryContributionType(SearchTest):
-- 
1.7.1

