From bc735af7d74f00ee586b5fb7d03c3412cf21d212 Mon Sep 17 00:00:00 2001
From: Vivek Shrivastava <vivshrivastava@gmail.com>
Date: Mon, 6 Jun 2011 06:19:55 -0700
Subject: [PATCH] issue310 : replaced  HitCountCache django model with Django's caching framework

---
 mysite/search/controllers.py                       |   46 +++--
 .../migrations/0065_auto__del_hitcountcache.py     |  220 ++++++++++++++++++++
 mysite/search/models.py                            |   56 +++---
 mysite/search/tests.py                             |   43 +++--
 4 files changed, 306 insertions(+), 59 deletions(-)
 create mode 100644 mysite/search/migrations/0065_auto__del_hitcountcache.py

diff --git a/mysite/search/controllers.py b/mysite/search/controllers.py
index bd4941c..fc766e5 100644
--- a/mysite/search/controllers.py
+++ b/mysite/search/controllers.py
@@ -15,16 +15,20 @@
 # You should have received a copy of the GNU Affero General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
+from mysite.base.models import Timestamp
 import mysite.search.models
 import mysite.search.views
 import mysite.base.unicode_sanity
+import collections
 import mysite.base.decorators
 import collections
 import urllib
 import re
 import hashlib
+from django.core.cache import cache
 from django.db.models import Q
 import MySQLdb
+import logging
 
 def order_bugs(query):
     # Minus sign: reverse order
@@ -351,25 +355,31 @@ class Query:
         # then return a hash of our sorted items self.
         return hashlib.sha1(stringified).hexdigest() # sadly we cause a 2x space blowup here
     
-    def get_or_create_cached_hit_count(self):
+    def get_hit_count_cache_key(self):
         hashed_query = self.get_sha1()
-        hit_count = 0 # we try a few strategies to know something about the hit count, but if we
-                      # fail to gain any data on the query and its hit count, 0 is a safe enough
-                      # value to return.
-
-        existing_hccs = mysite.search.models.HitCountCache.objects.filter(hashed_query=hashed_query)
-        if existing_hccs:
-            hcc = existing_hccs[0]
-            hit_count = hcc.hit_count
-        else:
-            count = self.get_bugs_unordered().count()
-            try:
-                hcc, _ = mysite.search.models.HitCountCache.objects.get_or_create(
-                        hashed_query=hashed_query,
-                        defaults={'hit_count': count})
-                hit_count = hcc.hit_count
-            except MySQLdb.IntegrityError:
-                hit_count = 0
+        hcc_timestamp = Timestamp.get_timestamp_for_string('hit_count_cache_timestamp')
+        hit_count_cache_key = "hcc_%s_%s" % (hashlib.sha1(hcc_timestamp.__str__()).hexdigest(), hashed_query)
+        return hit_count_cache_key
+
+    def get_or_create_cached_hit_count(self):
+        # Get the cache key used to store the hit count.
+        hit_count_cache_key = self.get_hit_count_cache_key()
+        # Fetch the hit count from the cache.
+        hit_count = cache.get(hit_count_cache_key)
+        logging.debug( "Cached hit count: " + str(hit_count))
+        # We need to be careful here, as a cached count of zero would be
+        # read here as a None value, when we only want to pick up an
+        # actual None value (corresponding to the cache key not
+        # existing).
+        if hit_count is None:
+            # There is nothing in the cache for this key. Either the
+            # query has not been counted before, or the Timestamp has
+            # been refreshed due to a change in the Bug objects. So get
+            # a new count.
+            hit_count = self.get_bugs_unordered().count()
+            cache.set(hit_count_cache_key, hit_count)
+            logging.info("Set hit count: " + str(hit_count))
+        logging.info(hit_count)
         return hit_count
 
     def get_query_string(self):
diff --git a/mysite/search/migrations/0065_auto__del_hitcountcache.py b/mysite/search/migrations/0065_auto__del_hitcountcache.py
new file mode 100644
index 0000000..2204b04
--- /dev/null
+++ b/mysite/search/migrations/0065_auto__del_hitcountcache.py
@@ -0,0 +1,220 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+
+        # Deleting model 'HitCountCache'
+        db.delete_table('search_hitcountcache')
+
+
+    def backwards(self, orm):
+
+        # Adding model 'HitCountCache'
+        db.create_table('search_hitcountcache', (
+            ('modified_date', self.gf('django.db.models.fields.DateTimeField')(auto_now=True, blank=True)),
+            ('hit_count', self.gf('django.db.models.fields.IntegerField')()),
+            ('hashed_query', self.gf('django.db.models.fields.CharField')(max_length=40, primary_key=True)),
+            ('created_date', self.gf('django.db.models.fields.DateTimeField')(auto_now_add=True, null=True, blank=True)),
+        ))
+        db.send_create_signal('search', ['HitCountCache'])
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'customs.webresponse': {
+            'Meta': {'object_name': 'WebResponse'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'response_headers': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.IntegerField', [], {}),
+            'text': ('django.db.models.fields.TextField', [], {}),
+            'url': ('django.db.models.fields.TextField', [], {})
+        },
+        'profile.dataimportattempt': {
+            'Meta': {'object_name': 'DataImportAttempt'},
+            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.utcnow'}),
+            'failed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'person': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.Person']"}),
+            'query': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'source': ('django.db.models.fields.CharField', [], {'max_length': '2'}),
+            'web_response': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['customs.WebResponse']", 'null': 'True'})
+        },
+        'profile.person': {
+            'Meta': {'object_name': 'Person'},
+            'bio': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
+            'blacklisted_repository_committers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['profile.RepositoryCommitter']", 'symmetrical': 'False'}),
+            'contact_blurb': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
+            'dont_guess_my_location': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'email_me_weekly_re_projects': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'expand_next_steps': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'gotten_name_from_ohloh': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_polled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1970, 1, 1, 0, 0)'}),
+            'location_confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'location_display_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
+            'photo': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100'}),
+            'photo_thumbnail': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'photo_thumbnail_20px_wide': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'photo_thumbnail_30px_wide': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'show_email': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
+        },
+        'profile.repositorycommitter': {
+            'Meta': {'unique_together': "(('project', 'data_import_attempt'),)", 'object_name': 'RepositoryCommitter'},
+            'data_import_attempt': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.DataImportAttempt']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"})
+        },
+        'search.answer': {
+            'Meta': {'object_name': 'Answer'},
+            'author': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'}),
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"}),
+            'question': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'answers'", 'to': "orm['search.ProjectInvolvementQuestion']"}),
+            'text': ('django.db.models.fields.TextField', [], {}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '255', 'null': 'True'})
+        },
+        'search.bug': {
+            'Meta': {'object_name': 'Bug'},
+            'as_appears_in_distribution': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200'}),
+            'bize_size_tag_name': ('django.db.models.fields.CharField', [], {'max_length': '50'}),
+            'bug_tracker': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.BugTracker']", 'null': 'True'}),
+            'canonical_bug_link': ('django.db.models.fields.URLField', [], {'unique': 'True', 'max_length': '200'}),
+            'concerns_just_documentation': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'date_reported': ('django.db.models.fields.DateTimeField', [], {}),
+            'description': ('django.db.models.fields.TextField', [], {}),
+            'good_for_newcomers': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'importance': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'last_polled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1970, 1, 1, 0, 0)'}),
+            'last_touched': ('django.db.models.fields.DateTimeField', [], {}),
+            'looks_closed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'people_involved': ('django.db.models.fields.IntegerField', [], {'null': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"}),
+            'status': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'submitter_realname': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'submitter_username': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '500'}),
+            'tracker_id': ('django.db.models.fields.PositiveIntegerField', [], {'null': 'True'}),
+            'tracker_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']", 'null': 'True'})
+        },
+        'search.bugalert': {
+            'Meta': {'object_name': 'BugAlert'},
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '255'}),
+            'how_many_bugs_at_time_of_request': ('django.db.models.fields.IntegerField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'query_string': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'search.bugtracker': {
+            'Meta': {'object_name': 'BugTracker'},
+            'bug_tracker_model_class_name': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
+            'bug_tracker_model_module': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
+            'bug_tracker_model_pk': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'}),
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'module_name': ('django.db.models.fields.CharField', [], {'max_length': '500', 'blank': 'True'})
+        },
+        'search.project': {
+            'Meta': {'object_name': 'Project'},
+            'cached_contributor_count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True'}),
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'date_icon_was_fetched_from_ohloh': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'null': 'True'}),
+            'display_name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200'}),
+            'homepage': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'icon_for_profile': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_for_search_result': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_raw': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True', 'blank': 'True'}),
+            'icon_smaller_for_badge': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'language': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'logo_contains_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '200'}),
+            'people_who_wanna_help': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'projects_i_wanna_help'", 'symmetrical': 'False', 'to': "orm['profile.Person']"})
+        },
+        'search.projectinvolvementquestion': {
+            'Meta': {'object_name': 'ProjectInvolvementQuestion'},
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_bug_style': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'key_string': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'text': ('django.db.models.fields.TextField', [], {})
+        },
+        'search.wannahelpernote': {
+            'Meta': {'unique_together': "[('project', 'person')]", 'object_name': 'WannaHelperNote'},
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'person': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.Person']"}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"})
+        },
+        'search.wrongicon': {
+            'Meta': {'object_name': 'WrongIcon'},
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'date_icon_was_fetched_from_ohloh': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'null': 'True'}),
+            'icon_for_profile': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_for_search_result': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_raw': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_smaller_for_badge': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'logo_contains_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"})
+        }
+    }
+
+    complete_apps = ['search']
\ No newline at end of file
diff --git a/mysite/search/models.py b/mysite/search/models.py
index fc073bf..4797eb9 100644
--- a/mysite/search/models.py
+++ b/mysite/search/models.py
@@ -699,45 +699,45 @@ class WannaHelperNote(OpenHatchModel):
     def get_absolute_url(self):
         return urljoin(reverse('mysite.project.views.project', args=[self.project.name]), "#person_summary_%d" % self.person.pk)
 
-class HitCountCache(OpenHatchModel):
-    hashed_query = models.CharField(max_length=40, primary_key=True) # stores a sha1 
-    hit_count = models.IntegerField()
 
-    @staticmethod
-    def clear_cache(*args, **kwargs):
-        # Ignore arguments passed here by Django signals.
-        HitCountCache.objects.all().delete()
-
-def post_bug_save_increment_bug_model_timestamp(sender, raw, instance, created, **kwargs):
-    if raw:
-        return # this is coming in from loaddata. You must know what you are doing.
-
-    if created:
-        return # whatever, who cares
-    if instance.looks_closed:
-        # bump it
-        import mysite.base.models
-        mysite.base.models.Timestamp.update_timestamp_for_string(str(sender))
-        # and clear the search cache
+def post_bug_save_delete_increment_hit_count_cache_timestamp(sender, instance, **kwargs):
+         # always bump it
+         import mysite.base.models
+         mysite.base.models.Timestamp.update_timestamp_for_string('hit_count_cache_timestamp'),
+
+def post_bug_save_increment_bug_model_timestamp(sender,instance,**kwargs):
+        if instance.looks_closed:
+            # bump it
+            import mysite.base.models
+            mysite.base.models.Timestamp.update_timestamp_for_string(str(sender))
+            # and clear the search cache
         import mysite.search.tasks
         mysite.search.tasks.clear_search_cache.delay()
 
 def post_bug_delete_increment_bug_model_timestamp(sender, instance, **kwargs):
-    # always bump it
+        # always bump it
     import mysite.base.models
     mysite.base.models.Timestamp.update_timestamp_for_string(str(sender))
 
-# Clear the cache whenever Bugs are added or removed.
-models.signals.post_save.connect(HitCountCache.clear_cache, Bug)
-models.signals.post_delete.connect(HitCountCache.clear_cache, Bug)
-
-# Clear all people's recommended bug cache when a bug is deleted
-# (or when it has been modified to say it looks_closed)
-models.signals.post_save.connect(
+    # Clear the hit count cache whenever Bugs are added or removed. This is
+    # simply done by bumping the Timestamp used to generate the cache keys.
+    # The hit count cache is used in get_or_create_cached_hit_count() in
+    # mysite.search.controllers.Query.
+    models.signals.post_save.connect(
+    post_bug_save_delete_increment_hit_count_cache_timestamp,
+     Bug)
+    models.signals.post_delete.connect(
+    post_bug_save_delete_increment_hit_count_cache_timestamp,
+     Bug)
+
+
+    # Clear all people's recommended bug cache when a bug is deleted
+    # (or when it has been modified to say it looks_closed)
+    models.signals.post_save.connect(
     post_bug_save_increment_bug_model_timestamp,
     Bug)
 
-models.signals.post_delete.connect(
+    models.signals.post_delete.connect(
     post_bug_delete_increment_bug_model_timestamp,
     Bug)
 
diff --git a/mysite/search/tests.py b/mysite/search/tests.py
index 58dd087..320c7ef 100644
--- a/mysite/search/tests.py
+++ b/mysite/search/tests.py
@@ -25,18 +25,20 @@ import mysite.account.tests
 from mysite.profile.models import Person
 import mysite.profile.models
 import mysite.search.controllers
-from mysite.search.models import Project, Bug, HitCountCache, \
+from mysite.search.models import Project, Bug, \
         ProjectInvolvementQuestion, Answer, BugAlert
 from mysite.search import views
 import datetime
 import mysite.project.views
 import mysite.customs.bugtrackers
 
+import hashlib
 import simplejson
 import mock
 from twill import commands as tc
 
 from django.test import TestCase
+from django.core.cache import cache
 from django.core.urlresolvers import reverse
 from django.core.files.base import ContentFile
 from django.contrib.auth.models import User
@@ -1027,9 +1029,11 @@ class QueryGrabHitCount(SearchTest):
         data = {u'q': u'eventhive', u'language': u'shoutNOW'}
         query = mysite.search.controllers.Query.create_from_GET_data(data)
         stored_hit_count = 10
-        HitCountCache.objects.create(
-                hashed_query=query.get_sha1(),
-                hit_count=stored_hit_count)
+        # Get the cache key used to store the hit count.
+        hit_count_cache_key = query.get_hit_count_cache_key()
+        # Set the cache value.
+        cache.set(hit_count_cache_key, stored_hit_count)
+        # Test that it is fetched correctly.
         self.assertEqual(query.get_or_create_cached_hit_count(), stored_hit_count)
 
     def test_shoutnow_cache_hitcount_on_grab(self):
@@ -1043,8 +1047,13 @@ class QueryGrabHitCount(SearchTest):
         expected_hit_count = 1
         self.assertEqual(query.get_or_create_cached_hit_count(), expected_hit_count)
 
-        hcc = HitCountCache.objects.get(hashed_query=query.get_sha1())
-        self.assertEqual(hcc.hit_count, expected_hit_count)
+        # Get the cache key used to store the hit count.
+        hit_count_cache_key = query.get_hit_count_cache_key()
+        # Get the cache value.
+        stored_hit_count = cache.get(hit_count_cache_key)
+        print "Stored: %s" % stored_hit_count
+        # Test that it was stored correctly.
+        self.assertEqual(stored_hit_count, expected_hit_count)
 
 class ClearCacheWhenBugsChange(SearchTest):
 
@@ -1052,22 +1061,30 @@ class ClearCacheWhenBugsChange(SearchTest):
         data = {u'language': u'shoutNOW'}
         query = mysite.search.controllers.Query.create_from_GET_data(data)
 
+        old_hcc_timestamp = mysite.base.models.Timestamp.get_timestamp_for_string(
+        'hit_count_cache_timestamp')
+
         # Cache entry created after hit count retrieval
         query.get_or_create_cached_hit_count()
-        self.assert_(HitCountCache.objects.all())
-
+        new_hcc_timestamp = mysite.base.models.Timestamp.get_timestamp_for_string(
+                'hit_count_cache_timestamp')
+        self.assertEqual(old_hcc_timestamp, new_hcc_timestamp)
         # Cache cleared after bug save
         project = Project.create_dummy(language=u'shoutNOW')
         bug = Bug.create_dummy(project=project)
-        self.assertFalse(HitCountCache.objects.all())
-
+        newer_hcc_timestamp = mysite.base.models.Timestamp.get_timestamp_for_string(
+            'hit_count_cache_timestamp')
+        self.assertNotEqual(new_hcc_timestamp, newer_hcc_timestamp)
         # Cache entry created after hit count retrieval
         query.get_or_create_cached_hit_count()
-        self.assert_(HitCountCache.objects.all())
-
+        newest_hcc_timestamp = mysite.base.models.Timestamp.get_timestamp_for_string(
+                'hit_count_cache_timestamp')
+        self.assertEqual(newer_hcc_timestamp, newest_hcc_timestamp)
         # Cache cleared after bug deletion
         bug.delete()
-        self.assertFalse(HitCountCache.objects.all())
+        newester_hcc_timestamp = mysite.base.models.Timestamp.get_timestamp_for_string(
+             'hit_count_cache_timestamp'),
+        self.assertNotEqual(newest_hcc_timestamp, newester_hcc_timestamp)
 
 class DontRecommendFutileSearchTerms(TwillTests):
 
-- 
1.7.2.5

