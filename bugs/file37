From 3c5a9a94c294c366b2a9a3ebcbfdfdc78d4970b3 Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Fri, 25 Jun 2010 16:46:37 +0000
Subject: [PATCH] Removed TestCase for old format Bugzilla importer, since it is no longer there

---
 mysite/customs/tests.py |  164 -----------------------------------------------
 1 files changed, 0 insertions(+), 164 deletions(-)

diff --git a/mysite/customs/tests.py b/mysite/customs/tests.py
index 4733cc6..a51341e 100644
--- a/mysite/customs/tests.py
+++ b/mysite/customs/tests.py
@@ -32,7 +32,6 @@ import ohloh
 import lp_grabber
 
 from mysite.profile.tasks import FetchPersonDataFromOhloh
-import mysite.customs.miro
 import mysite.customs.debianqa
 import mysite.customs.cia
 import mysite.customs.feed
@@ -278,169 +277,6 @@ class LaunchpadDataTests(django.test.TestCase):
 
 class BugzillaTests(django.test.TestCase):
     fixtures = ['miro-project']
-    def test_kde(self):
-        p = Project.create_dummy(name='KDE')
-        f = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'kde-117760-2010-04-09.xml')
-        xml_fd = file(f)
-        bug = mysite.customs.miro.xml2bug_object(xml_fd)
-        self.assertEqual(bug.submitter_username, 'hasso kde org')
-        self.assertEqual(bug.submitter_realname, 'Hasso Tepper')
-
-    def test_kde_harder_bug(self):
-        p = Project.create_dummy(name='KDE')
-        f = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'kde-182054-2010-04-09.xml')
-        xml_fd = file(f)
-        bug = mysite.customs.miro.xml2bug_object(xml_fd)
-        self.assertEqual(bug.submitter_username, 'jedd progsoc org')
-        self.assertEqual(bug.submitter_realname, '')
-
-    def test_miro_bug_object(self):
-        # Parse XML document as if we got it from the web
-        f = os.path.join(settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06.xml')
-        xml_fd = file(f)
-        bug = mysite.customs.miro.xml2bug_object(xml_fd)
-
-        self.assertEqual(bug.project.name, 'Miro')
-        self.assertEqual(bug.title, "Add test for torrents that use gzip'd urls")
-        self.assertEqual(bug.description, """This broke. We should make sure it doesn't break again.
-Trac ticket id: 2294
-Owner: wguaraldi
-Reporter: nassar
-Keywords: Torrent unittest""")
-        self.assertEqual(bug.status, 'NEW')
-        self.assertEqual(bug.importance, 'normal')
-        self.assertEqual(bug.people_involved, 5)
-        self.assertEqual(bug.date_reported, datetime.datetime(2006, 6, 9, 12, 49))
-        self.assertEqual(bug.last_touched, datetime.datetime(2008, 6, 11, 23, 56, 27))
-        self.assertEqual(bug.submitter_username, 'nassar@pculture.org')
-        self.assertEqual(bug.submitter_realname, 'Nick Nassar')
-        self.assertEqual(bug.canonical_bug_link, 'http://bugzilla.pculture.org/show_bug.cgi?id=2294')
-        self.assert_(bug.good_for_newcomers)
-
-    def test_csv_parsing(self):
-        csv_fd = StringIO('''some_header,whatever
-1,silly bug
-2,other silly bug''')
-        bugs = mysite.customs.miro.bugzilla_query_to_bug_ids(
-            csv_fd)
-        self.assertEqual(bugs, [1, 2])
-
-    @mock.patch("mysite.customs.miro.open_xml_url")
-    @mock.patch("mysite.customs.miro.bitesized_bugs_csv_fd")
-    def test_full_grab_miro_bugs(self, mock_csv_maker, mock_xml_opener):
-        mock_xml_opener.return_value = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06.xml'))
-
-        mock_csv_maker.return_value = StringIO("""bug_id,useless
-1,useless""")
-        mysite.customs.miro.grab_miro_bugs()
-        all_bugs = Bug.all_bugs.all()
-        self.assertEqual(len(all_bugs), 1)
-        bug = all_bugs[0]
-        self.assertEqual(bug.canonical_bug_link,
-                         'http://bugzilla.pculture.org/show_bug.cgi?id=2294')
-        self.assertFalse(bug.looks_closed)
-
-        # And the new manager does find it
-        self.assertEqual(Bug.open_ones.all().count(), 1)
-
-
-    @mock.patch("mysite.customs.miro.open_xml_url")
-    @mock.patch("mysite.customs.miro.bitesized_bugs_csv_fd")
-    def test_miro_bugzilla_detects_closedness(self, mock_csv_maker, mock_xml_opener):
-        cooked_xml = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data',
-            'miro-2294-2009-08-06.xml')).read().replace(
-            'NEW', 'CLOSED')
-        mock_xml_opener.return_value = StringIO(cooked_xml)
-        
-        mock_csv_maker.return_value = StringIO("""bug_id,useless
-1,useless""")
-        mysite.customs.miro.grab_miro_bugs()
-        all_bugs = Bug.all_bugs.all()
-        self.assertEqual(len(all_bugs), 1)
-        bug = all_bugs[0]
-        self.assertEqual(bug.canonical_bug_link,
-                         'http://bugzilla.pculture.org/show_bug.cgi?id=2294')
-        self.assert_(bug.looks_closed)
-
-        # And the new manager successfully does NOT find it!
-        self.assertEqual(Bug.open_ones.all().count(), 0)
-
-    @mock.patch("mysite.customs.miro.open_xml_url")
-    @mock.patch("mysite.customs.miro.bitesized_bugs_csv_fd")
-    def test_full_grab_resolved_miro_bug(self, mock_csv_maker, mock_xml_opener):
-        mock_xml_opener.return_value = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06-RESOLVED.xml'))
-
-        mock_csv_maker.return_value = StringIO("""bug_id,useless
-1,useless""")
-        mysite.customs.miro.grab_miro_bugs()
-        all_bugs = Bug.all_bugs.all()
-        self.assertEqual(len(all_bugs), 1)
-        bug = all_bugs[0]
-        self.assertEqual(bug.canonical_bug_link,
-                         'http://bugzilla.pculture.org/show_bug.cgi?id=2294')
-        self.assert_(bug.looks_closed)
-
-    @mock.patch("mysite.customs.miro.open_xml_url")
-    @mock.patch("mysite.customs.miro.bitesized_bugs_csv_fd")
-    def test_full_grab_miro_bugs_refreshes_older_bugs(self, mock_csv_maker, mock_xml_opener):
-        mock_xml_opener.return_value = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06.xml'))
-
-        mock_csv_maker.return_value = StringIO("""bug_id,useless
-2294,useless""")
-        mysite.customs.miro.grab_miro_bugs()
-
-        # Pretend there's old data lying around:
-        bug = Bug.all_bugs.get()
-        bug.people_involved = 1
-        bug.save()
-
-        mock_xml_opener.return_value = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06.xml'))
-
-        # Now refresh
-        mysite.customs.miro.grab_miro_bugs()
-
-        # Now verify there is only one bug, and its people_involved is 5
-        bug = Bug.all_bugs.get()
-        self.assertEqual(bug.people_involved, 5)
-
-
-    @mock.patch("mysite.customs.miro.open_xml_url")
-    @mock.patch("mysite.customs.miro.bitesized_bugs_csv_fd")
-    def test_regrab_miro_bugs_refreshes_older_bugs_even_when_missing_from_csv(self, mock_csv_maker, mock_xml_opener):
-        mock_xml_opener.return_value = open(os.path.join(
-            settings.MEDIA_ROOT, 'sample-data', 'miro-2294-2009-08-06.xml'))
-
-        # Situation: Assume there are zero bitesized bugs today.
-        # Desire: We re-get old bugs that don't show up in the CSV.
-
-        # Prereq: We have some bug with lame data:
-        bug = Bug()
-        bug.people_involved = 1
-        bug.canonical_bug_link = 'http://bugzilla.pculture.org/show_bug.cgi?id=2294'
-        bug.date_reported = datetime.datetime.now()
-        bug.last_touched = datetime.datetime.now()
-        bug.last_polled = datetime.datetime.now()
-        bug.project, _ = Project.objects.get_or_create(name='Miro')
-        bug.save()
-
-        # Prepare a fake CSV that is empty
-        mock_csv_maker.return_value = StringIO('')
-
-        # Now, do a crawl and notice that we updated the bug even though the CSV is empty
-        
-        mysite.customs.miro.grab_miro_bugs() # refreshes no bugs since CSV is empty!
-        all_bugs = Bug.all_bugs.all()
-        self.assertEqual(len(all_bugs), 1)
-        bug = all_bugs[0]
-        self.assertEqual(bug.people_involved, 5)
-
-class BugzillaNewFormatTests(django.test.TestCase):
-    fixtures = ['miro-project']
     @mock.patch("mysite.customs.bugtrackers.bugzilla.url2bug_data")
     def test_kde(self, mock_xml_opener):
         p = Project.create_dummy(name='KDE')
-- 
1.7.1

