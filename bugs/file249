From 0e65af60eb9bccc59d481c75b53fd6a10e471bf8 Mon Sep 17 00:00:00 2001
From: Filipovskii Off <filipovskii_off@Puppo.(none)>
Date: Mon, 25 Apr 2011 01:31:43 +0400
Subject: [PATCH] Solves Issue 271

---
 mysite/missions/base/controllers.py                |   13 ++-
 ..._field_stepcompletion_is_currently_completed.py |  137 ++++++++++++++++++++
 mysite/missions/models.py                          |    4 +-
 mysite/missions/tar/tests.py                       |    6 +-
 mysite/missions/tests.py                           |   39 ++++++
 5 files changed, 192 insertions(+), 7 deletions(-)
 create mode 100644 mysite/missions/migrations/0010_auto__add_field_stepcompletion_is_currently_completed.py

diff --git a/mysite/missions/base/controllers.py b/mysite/missions/base/controllers.py
index fab9425..9d74ae3 100644
--- a/mysite/missions/base/controllers.py
+++ b/mysite/missions/base/controllers.py
@@ -40,14 +40,21 @@ def get_mission_data_path(mission_type):
     return os.path.join(os.path.dirname(__file__), '..', mission_type, 'data')
 
 def set_mission_completed(profile, mission_name):
-    StepCompletion.objects.get_or_create(person=profile, step=Step.objects.get(name=mission_name))
+    s, _ = StepCompletion.objects.get_or_create(person=profile, step=Step.objects.get(name=mission_name))
+    s.is_currently_completed = True
+    s.save()
 
 def unset_mission_completed(profile, mission_name):
-    StepCompletion.objects.filter(person=profile, step=Step.objects.get(name=mission_name)).delete()
+    s = StepCompletion.objects.filter(person=profile, step=Step.objects.get(name=mission_name), is_currently_completed=True)
+    if len(s):
+        s[0].is_currently_completed = False
+        s[0].save()
 
 def mission_completed(profile, mission_name):
-    return len(StepCompletion.objects.filter(step__name=mission_name, person=profile)) != 0
+    return len(StepCompletion.objects.filter(step__name=mission_name, person=profile, is_currently_completed=True)) != 0
 
+def mission_completed_at_least_once(profile, mission_name):
+    return len(StepCompletion.objects.filter(step__name=mission_name, person=profile)) != 0
 
 class IncorrectPatch(Exception):
     pass
diff --git a/mysite/missions/migrations/0010_auto__add_field_stepcompletion_is_currently_completed.py b/mysite/missions/migrations/0010_auto__add_field_stepcompletion_is_currently_completed.py
new file mode 100644
index 0000000..63ae3c0
--- /dev/null
+++ b/mysite/missions/migrations/0010_auto__add_field_stepcompletion_is_currently_completed.py
@@ -0,0 +1,137 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding field 'StepCompletion.is_currently_completed'
+        db.add_column('missions_stepcompletion', 'is_currently_completed', self.gf('django.db.models.fields.BooleanField')(default=True), keep_default=False)
+
+
+    def backwards(self, orm):
+        
+        # Deleting field 'StepCompletion.is_currently_completed'
+        db.delete_column('missions_stepcompletion', 'is_currently_completed')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'customs.webresponse': {
+            'Meta': {'object_name': 'WebResponse'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'response_headers': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.IntegerField', [], {}),
+            'text': ('django.db.models.fields.TextField', [], {}),
+            'url': ('django.db.models.fields.TextField', [], {})
+        },
+        'missions.step': {
+            'Meta': {'object_name': 'Step'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '255'})
+        },
+        'missions.stepcompletion': {
+            'Meta': {'unique_together': "(('person', 'step'),)", 'object_name': 'StepCompletion'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_currently_completed': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'person': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.Person']"}),
+            'step': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['missions.Step']"})
+        },
+        'profile.dataimportattempt': {
+            'Meta': {'object_name': 'DataImportAttempt'},
+            'completed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'date_created': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.utcnow'}),
+            'failed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'person': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.Person']"}),
+            'query': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'source': ('django.db.models.fields.CharField', [], {'max_length': '2'}),
+            'web_response': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['customs.WebResponse']", 'null': 'True'})
+        },
+        'profile.person': {
+            'Meta': {'object_name': 'Person'},
+            'bio': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
+            'blacklisted_repository_committers': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['profile.RepositoryCommitter']", 'symmetrical': 'False'}),
+            'contact_blurb': ('django.db.models.fields.TextField', [], {'blank': 'True'}),
+            'dont_guess_my_location': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'email_me_weekly_re_projects': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'expand_next_steps': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'gotten_name_from_ohloh': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'homepage_url': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_polled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(1970, 1, 1, 0, 0)'}),
+            'location_confirmed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'location_display_name': ('django.db.models.fields.CharField', [], {'max_length': '255', 'blank': 'True'}),
+            'photo': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100'}),
+            'photo_thumbnail': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'photo_thumbnail_20px_wide': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'photo_thumbnail_30px_wide': ('django.db.models.fields.files.ImageField', [], {'default': "''", 'max_length': '100', 'null': 'True'}),
+            'show_email': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'unique': 'True'})
+        },
+        'profile.repositorycommitter': {
+            'Meta': {'unique_together': "(('project', 'data_import_attempt'),)", 'object_name': 'RepositoryCommitter'},
+            'data_import_attempt': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['profile.DataImportAttempt']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['search.Project']"})
+        },
+        'search.project': {
+            'Meta': {'object_name': 'Project'},
+            'cached_contributor_count': ('django.db.models.fields.IntegerField', [], {'default': '0', 'null': 'True'}),
+            'created_date': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'null': 'True', 'blank': 'True'}),
+            'date_icon_was_fetched_from_ohloh': ('django.db.models.fields.DateTimeField', [], {'default': 'None', 'null': 'True'}),
+            'display_name': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200'}),
+            'homepage': ('django.db.models.fields.URLField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'icon_for_profile': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_for_search_result': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_raw': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True', 'blank': 'True'}),
+            'icon_smaller_for_badge': ('django.db.models.fields.files.ImageField', [], {'default': 'None', 'max_length': '100', 'null': 'True'}),
+            'icon_url': ('django.db.models.fields.URLField', [], {'max_length': '200'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'language': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '200', 'blank': 'True'}),
+            'logo_contains_name': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'modified_date': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '200'}),
+            'people_who_wanna_help': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'projects_i_wanna_help'", 'symmetrical': 'False', 'to': "orm['profile.Person']"})
+        }
+    }
+
+    complete_apps = ['missions']
diff --git a/mysite/missions/models.py b/mysite/missions/models.py
index 3c1f9e4..fb94dad 100644
--- a/mysite/missions/models.py
+++ b/mysite/missions/models.py
@@ -22,6 +22,8 @@ class Step(models.Model):
 class StepCompletion(models.Model):
     person = models.ForeignKey('profile.Person')
     step = models.ForeignKey('Step')
-
+    # Current mission status (True - user have completed it, False - reseted) 
+    is_currently_completed = models.BooleanField(default=True)
+	
     class Meta:
         unique_together = ('person', 'step')
diff --git a/mysite/missions/tar/tests.py b/mysite/missions/tar/tests.py
index 5e8c906..78cb810 100644
--- a/mysite/missions/tar/tests.py
+++ b/mysite/missions/tar/tests.py
@@ -153,7 +153,7 @@ class MissionPageStateTests(TwillTests):
         
         response = self.client.post(reverse(views.reset), {'mission_parts': 'tar' })
         self.assert_('Operation successful' in response.content)
-        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar', person=paulproteus)), 0)        
+        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar', person=paulproteus, is_currently_completed=True)), 0)        
         
         
     def test_mission_completion_partial_reset(self):
@@ -163,5 +163,5 @@ class MissionPageStateTests(TwillTests):
         
         response = self.client.post(reverse(views.reset), {'mission_parts': 'tar,tar_extract' })
         self.assert_('Operation successful' in response.content)
-        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar', person=paulproteus)), 0)
-        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar_extract', person=paulproteus)), 0)                  
+        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar', person=paulproteus, is_currently_completed=True)), 0)
+        self.assertEqual(len(StepCompletion.objects.filter(step__name='tar_extract', person=paulproteus, is_currently_completed=True)), 0)                  
diff --git a/mysite/missions/tests.py b/mysite/missions/tests.py
index 31c8fec..6eeb9d9 100644
--- a/mysite/missions/tests.py
+++ b/mysite/missions/tests.py
@@ -19,3 +19,42 @@
 from mysite.missions.tar.tests import *
 from mysite.missions.diffpatch.tests import *
 from mysite.missions.svn.tests import *
+
+import django.test
+from mysite.missions.base.controllers import *
+from mysite.missions.models import Step, StepCompletion
+from mysite.profile.models import Person
+
+class MissionCompletionTestCase(django.test.TestCase):
+    fixtures = ['initial-data.json', 'person-barry.json']	
+        
+    def test_unset_mission_completed_sets_is_currently_completed_to_true(self):
+        """When user unsets step completion
+        'StepCompletion' object 'is_currently_completed' param becomes true"""
+        profile = Person.objects.all()[0]
+        step = Step.objects.all()[0]	
+        #creates StepCompletion object
+        set_mission_completed(profile, step.name)
+
+        unset_mission_completed(profile, step.name)
+        obj_after = StepCompletion.objects.get(person = profile, step = step)
+		
+        self.assertTrue(mission_completed_at_least_once(profile, step.name))
+        self.assertFalse(mission_completed(profile, step.name))
+        self.assertFalse(obj_after.is_currently_completed)
+
+        obj_after.delete()
+
+    def test_set_mission_completed_sets_is_currently_completed_to_false(self):
+        profile = Person.objects.all()[0]
+        step = Step.objects.all()[0]
+
+        set_mission_completed(profile, step.name)
+        # sets StepCompletion.is_currently_completed to True
+        unset_mission_completed(profile, step.name)
+        # should make StepCompletion.is_currently_completed False again 
+        set_mission_completed(profile, step.name)
+        obj_after = StepCompletion.objects.get(person = profile, step = step)
+        
+        self.assertTrue(mission_completed(profile, step.name))
+        self.assertTrue(obj_after.is_currently_completed)
-- 
1.7.1

