From 0328b01cc31e65d054f1ae8e87538df0ada52d1a Mon Sep 17 00:00:00 2001
From: Asheesh Laroia <asheesh@asheesh.org>
Date: Tue, 20 Sep 2011 16:38:28 -0400
Subject: [PATCH] Fix instructions for git diff mission

There were a few problems:

* the templates were expecting a file_for_git_diff variable
* the text was unclear

This fixes them.

Closes: http://openhatch.org/bugs/issue592
---
 mysite/missions/git/views.py                     |    1 +
 mysite/missions/templates/missions/git/diff.html |   11 ++++++-----
 2 files changed, 7 insertions(+), 5 deletions(-)

diff --git a/mysite/missions/git/views.py b/mysite/missions/git/views.py
index e1a164c..8bbe2cf 100644
--- a/mysite/missions/git/views.py
+++ b/mysite/missions/git/views.py
@@ -144,6 +144,7 @@ def diff(request, passed_data = None):
     state.mission_step_prerequisite = 'git_checkout'
     data = state.as_dict_for_template_context()
     data['git_diff_form'] = forms.DiffForm()
+    data['file_for_git_diff'] = 'hello.py'
     return (request, 'missions/git/diff.html', data)
 
 @login_required
diff --git a/mysite/missions/templates/missions/git/diff.html b/mysite/missions/templates/missions/git/diff.html
index d8789f0..e9662b2 100644
--- a/mysite/missions/templates/missions/git/diff.html
+++ b/mysite/missions/templates/missions/git/diff.html
@@ -29,12 +29,13 @@
 <p>Now that you have a copy of the repository, you can fix the problem before it spreads further.</p>
 <p>In most cases, especially when starting to contribute to an open source project, you will not have rights to commit directly to the code base. Your contributions will be sent to the project maintainers using a patch file.  This file contains the contents of your changes.  The maintainers can review your work and then merge the changes into the main project, when ready. Using these steps, you can give The Brain a patch containing your changes.  If he likes it, he'll commit it for you!</p>
 
-<p>Your mission is this:</p>
+<p>Your mission is this: The file <code>{{ file_for_git_diff }}</code> contains a terrible error.  Fix it in your working copy to print "Hello world", rather than "Goodbye world". Submit your changes as a format-patch file. (You can use your working copy from the previous mission.)</p>
+
 <ul class="raquo_bullets">
-  <li>You can use your working copy from the previous mission.</li>
-  <li>The file <code>{{ file_for_git_diff }}</code> contains a terrible error.  Fix it in your working copy to print "Hello world", rather than "Goodbye world".</li>
-  <li>Check your changes into your local copy using <code>git add</code> then <code>git commit -m</code> (or by using <code>git commit -am</code> "Fixed hello world").</li>
-  <li>Run <code>git format-patch origin/master</code> to create a file containing the patch.  
+  <li>Tell git you want to prepare these changes for committing: <code>git add {{ file_for_git_diff }}</code></li>
+  <li>Tell git you want actually to commit: <code>git commit</code></li>
+  <li>This will launch a text editor. Type a commit log message, like "Fixed hello world". Then save and quit,</li>
+  <li>Create a file containing the patch: <code>git format-patch origin/master</code></li>
   <li>Open the patch file with a text editor and paste the results in the box below.</li>
 </ul>
 <br style="clear: left;" />
-- 
1.7.5.4

