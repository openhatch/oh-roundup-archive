From a0e23f23c2511cea78519b4723a1a41a0fbe7b44 Mon Sep 17 00:00:00 2001
From: Jack Grigg <me@jackgrigg.com>
Date: Tue, 3 Aug 2010 01:21:24 +0000
Subject: [PATCH] Added various URLError catches to customs_daily_tasks so that the
 importer doesn't break on them but logs an error message.

---
 .../management/commands/customs_daily_tasks.py     |   34 ++++++++++++++-----
 mysite/customs/tests.py                            |   36 +++++++++++++++++++-
 2 files changed, 60 insertions(+), 10 deletions(-)

diff --git a/mysite/customs/management/commands/customs_daily_tasks.py b/mysite/customs/management/commands/customs_daily_tasks.py
index 10423d1..af31157 100644
--- a/mysite/customs/management/commands/customs_daily_tasks.py
+++ b/mysite/customs/management/commands/customs_daily_tasks.py
@@ -55,9 +55,14 @@ class Command(BaseCommand):
 
         ### Okay, now update!
         for thing in enabled_roundup_trackers:
-            logging.info("[Roundup] About to update %s" % thing)
             instantiated = thing()
-            instantiated.update()
+            project_name = instantiated.project.name
+            logging.info("[Roundup] About to update %s" % project_name)
+            try:
+                instantiated.update()
+            except urllib2.URLError, e:
+                logging.error("[Roundup] ERROR: %s importer failed with urllib2.URLError, skipping..." % project_name)
+                logging.error("[Roundup] Error message: %s" % str(e))
 
     def find_and_update_enabled_trac_instances(self):
         enabled_trac_instances = []
@@ -72,9 +77,14 @@ class Command(BaseCommand):
 
         ### Okay, now update!
         for thing in enabled_trac_instances:
-            logging.info("[Trac] About to update %s" % thing)
             instantiated = thing()
-            instantiated.update()
+            project_name = instantiated.project_name
+            logging.info("[Trac] About to update %s" % project_name)
+            try:
+                instantiated.update()
+            except urllib2.URLError, e:
+                logging.error("[Trac] ERROR: %s importer failed with urllib2.URLError, skipping..." % project_name)
+                logging.error("[Trac] Error message: %s" % str(e))
 
     def find_and_update_enabled_bugzilla_instances(self):
         enabled_bugzilla_instances = []
@@ -89,15 +99,16 @@ class Command(BaseCommand):
 
         ### Okay, now update!
         for thing in enabled_bugzilla_instances:
-            logging.info("[Bugzilla] About to update %s" % thing)
             instantiated = thing()
+            project_name = instantiated.project_name
+            logging.info("[Bugzilla] About to update %s" % project_name)
             # FIXME: The Bugzilla trackers seem to throw error 500 a lot.
             # For now, chuck in a dirty big try except to stop importer
             # breaking.
             try:
                 instantiated.update()
             except urllib2.URLError, e:
-                logging.error("[Bugzilla] ERROR: Importer failed, likely HTTP500, continuing on...")
+                logging.error("[Bugzilla] ERROR: %s importer failed with urllib2.URLError, skipping..." % project_name)
                 logging.error("[Bugzilla] Error message: %s" % str(e))
 
     def find_and_update_enabled_google_instances(self):
@@ -113,12 +124,13 @@ class Command(BaseCommand):
 
         ### Okay, now update!
         for thing in enabled_google_instances:
-            logging.info("[Google] About to update %s" % thing)
             instantiated = thing()
+            project_name = instantiated.project_name
+            logging.info("[Google] About to update %s" % project_name)
             try:
                 instantiated.update()
             except gdata.client.RequestError, e:
-                logging.error("[Google] ERROR: Importer failed, probably HTTP403, continuing on...")
+                logging.error("[Google] ERROR: %s importer failed with gdata.client.RequestError, skipping..." % project_name)
                 logging.error("[Google] Error message: %s" % str(e))
 
     def update_launchpad_hosted_projects(self):
@@ -129,7 +141,11 @@ class Command(BaseCommand):
         mysite.customs.bugtrackers.launchpad.refresh_all_launchpad_bugs()
 
     def update_opensolaris_osnet(self):
-        mysite.customs.bugtrackers.opensolaris.update()
+        try:
+            mysite.customs.bugtrackers.opensolaris.update()
+        except urllib2.URLError, e:
+            logging.error("[OpenSolaris] ERROR: Importer failed with urllib2.URLError, skipping...")
+            logging.error("[OpenSolaris] Error message: %s" % str(e))
 
     def handle(self, *args, **options):
         self.update_opensolaris_osnet()
diff --git a/mysite/customs/tests.py b/mysite/customs/tests.py
index 1b3e871..73cd89f 100644
--- a/mysite/customs/tests.py
+++ b/mysite/customs/tests.py
@@ -57,6 +57,10 @@ def generate_403(self):
     import urllib2
     raise urllib2.HTTPError('', 403, {}, {}, None)
 
+def generate_408(self):
+    import urllib2
+    raise urllib2.HTTPError('', 408, {}, {}, None)
+
 def generate_504(self):
     import urllib2
     raise urllib2.HTTPError('', 504, {}, {}, None)
@@ -1272,12 +1276,32 @@ class BugzillaImporterOnlyPerformsAQueryOncePerDay(django.test.TestCase):
 class DailyBugImporter(django.test.TestCase):
 
     @mock.patch('mysite.customs.ohloh.mechanize_get')
+    def test_roundup_http_error_408_does_not_break(self, mock_error):
+        mock_error.side_effect = generate_408
+        mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_roundup_trackers()
+
+    @mock.patch('mysite.customs.ohloh.mechanize_get')
+    def test_roundup_generic_error_does_break(self, mock_error):
+        mock_error.side_effect = ValueError()
+        self.assertRaises(ValueError, mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_roundup_trackers)
+
+    @mock.patch('mysite.customs.ohloh.mechanize_get')
+    def test_trac_http_error_408_does_not_break(self, mock_error):
+        mock_error.side_effect = generate_408
+        mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_trac_instances()
+
+    @mock.patch('mysite.customs.ohloh.mechanize_get')
+    def test_trac_generic_error_does_break(self, mock_error):
+        mock_error.side_effect = ValueError()
+        self.assertRaises(ValueError, mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_trac_instances)
+
+    @mock.patch('mysite.customs.ohloh.mechanize_get')
     def test_bugzilla_http_error_504_does_not_break(self, mock_error):
         mock_error.side_effect = generate_504
         mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_bugzilla_instances()
 
     @mock.patch('mysite.customs.ohloh.mechanize_get')
-    def test_bugzilla_http_generic_error_does_break(self, mock_error):
+    def test_bugzilla_generic_error_does_break(self, mock_error):
         mock_error.side_effect = ValueError()
         self.assertRaises(ValueError, mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_bugzilla_instances)
 
@@ -1291,6 +1315,16 @@ class DailyBugImporter(django.test.TestCase):
         mock_error.side_effect = ValueError()
         self.assertRaises(ValueError, mysite.customs.management.commands.customs_daily_tasks.Command().find_and_update_enabled_google_instances)
 
+    @mock.patch('urllib2.urlopen')
+    def test_opensolaris_http_error_408_does_not_break(self, mock_error):
+        mock_error.side_effect = generate_408
+        mysite.customs.management.commands.customs_daily_tasks.Command().update_opensolaris_osnet()
+
+    @mock.patch('urllib2.urlopen')
+    def test_opensolaris_generic_error_does_break(self, mock_error):
+        mock_error.side_effect = ValueError()
+        self.assertRaises(ValueError, mysite.customs.management.commands.customs_daily_tasks.Command().update_opensolaris_osnet)
+
 def google_tests_sympy_extract_tracker_specific_data(issue, ret_dict):
     # Make modifications to ret_dict using provided atom data
     labels = [label.text for label in issue.label]
-- 
1.7.1

